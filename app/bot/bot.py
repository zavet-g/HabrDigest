from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from loguru import logger

from app.core.config import settings
from app.bot.handlers import router


class HabrDigestBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        self.dp.include_router(router)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting HabrDigest bot...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("Stopping HabrDigest bot...")
            await self.bot.session.close()
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = HabrDigestBot()


async def send_digest_to_user(telegram_id: int, articles: list, topic_name: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if not articles:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if topic_name:
            message_text = f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic_name}':\n\n"
        else:
            message_text = "üì∞ –ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –•–∞–±—Ä–∞:\n\n"
        
        for i, article in enumerate(articles[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Ç–∞—Ç–µ–π
            message_text += f"{i}. <b>{article['title']}</b>\n"
            if article.get('author'):
                message_text += f"   üë§ {article['author']}\n"
            if article.get('summary'):
                message_text += f"   üìù {article['summary']}\n"
            message_text += f"   üîó <a href='{article['url']}'>–ß–∏—Ç–∞—Ç—å –Ω–∞ –•–∞–±—Ä–µ</a>\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot_instance.bot.send_message(
            chat_id=telegram_id,
            text=message_text,
            disable_web_page_preview=True
        )
        
        logger.info(f"Sent digest to user {telegram_id}")
        
    except Exception as e:
        logger.error(f"Error sending digest to user {telegram_id}: {e}")


async def send_error_notification(telegram_id: int, error_message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    try:
        await bot_instance.bot.send_message(
            chat_id=telegram_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_message}"
        )
    except Exception as e:
        logger.error(f"Error sending error notification: {e}") 