from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from typing import List
from loguru import logger

from app.database.models import User, Topic, Subscription
from app.database.database import get_db
from app.services.parser_service import HabrParser
from app.services.database_service import DatabaseService
from app.core.config import settings


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
WAITING_FOR_CUSTOM_TOPIC = 1


def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("topics", cmd_topics))
    application.add_handler(CommandHandler("subscriptions", cmd_subscriptions))
    application.add_handler(CommandHandler("settings", cmd_settings))
    application.add_handler(CommandHandler("test_parsing", cmd_test_parsing))
    application.add_handler(CommandHandler("test_ai", cmd_test_ai))
    application.add_handler(CommandHandler("test_digest", cmd_test_digest))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(callback_topic_select, pattern="^topic_select:"))
    application.add_handler(CallbackQueryHandler(callback_add_custom_topic, pattern="^add_custom_topic$"))
    application.add_handler(CallbackQueryHandler(callback_subscribe, pattern="^subscribe_"))
    application.add_handler(CallbackQueryHandler(callback_unsubscribe, pattern="^unsubscribe_"))
    application.add_handler(CallbackQueryHandler(callback_set_frequency, pattern="^set_freq_"))
    application.add_handler(CallbackQueryHandler(callback_finish_selection, pattern="^finish_topic_selection$"))
    
    # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_add_custom_topic, pattern="^add_custom_topic$")],
        states={
            WAITING_FOR_CUSTOM_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_topic)]
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    )
    application.add_handler(conv_handler)


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        with DatabaseService() as db_service:
            existing_user = db_service.get_user_by_telegram_id(user.id)
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db_service.create_user(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                logger.info(f"New user registered: {user.id} ({user.username})")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è IT-—Å—Ç–∞—Ç–µ–π —Å –•–∞–±—Ä–∞. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º —Å –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—é–º–µ.

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å –•–∞–±—Ä–∞
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é Yandex GPT
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—å–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–µ–º—ã –∏ —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏

üöÄ –ù–∞—á–Ω–µ–º! –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–º—ã:
"""
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º
        keyboard = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with DatabaseService() as db_service:
            topics = db_service.get_active_topics()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
            for topic in topics:
                keyboard.append([InlineKeyboardButton(
                    text=f"üìö {topic.name}",
                    callback_data=f"topic_select:{topic.id}"
                )])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π —Ç–µ–º—ã
            keyboard.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É",
                callback_data="add_custom_topic"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
            keyboard.append([InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
                callback_data="finish_topic_selection"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/topics - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
/subscriptions - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
/test_ai - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex GPT
/test_parsing - –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –•–∞–±—Ä–∞
/test_digest - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π

ü§ñ AI-–º–æ–¥–µ–ª—å: Yandex GPT
- –ë—ã—Å—Ç—Ä–∞—è –∏ —Ç–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ
- –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: 6 —á–∞—Å–æ–≤
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: 24 —á–∞—Å–∞
- –°—Ç–∞—Ç—å–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
    """
    
    await update.message.reply_text(help_text)


async def cmd_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        with DatabaseService() as db_service:
            topics = db_service.get_active_topics()
            
            if not topics:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
                return
            
            topics_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n\n"
            keyboard = []
            
            for topic in topics:
                topics_text += f"‚Ä¢ {topic.name}\n"
                if topic.description:
                    topics_text += f"  {topic.description}\n"
                topics_text += "\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                keyboard.append([InlineKeyboardButton(
                    text=f"üìå {topic.name}",
                    callback_data=f"subscribe_{topic.id}"
                )])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π —Ç–µ–º—ã
            keyboard.append([InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–º—É",
                callback_data="add_custom_topic"
            )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(topics_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in topics command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")


async def cmd_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with DatabaseService() as db_service:
            user = db_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not user:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            subscriptions = db_service.get_user_subscriptions(user.id)
            
            if not subscriptions:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topics —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã!")
                return
            
            subs_text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            keyboard = []
            
            for sub in subscriptions:
                topic = sub.topic
                subs_text += f"‚Ä¢ {topic.name}\n"
                subs_text += f"  –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {sub.frequency_hours} —á–∞—Å–æ–≤\n\n"
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
                keyboard.append([InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {topic.name}",
                    callback_data=f"unsubscribe_{sub.id}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(subs_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in subscriptions command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def cmd_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        with DatabaseService() as db_service:
            user = db_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not user:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            subscriptions = db_service.get_user_subscriptions(user.id)
            
            if not subscriptions:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
                return
            
            settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
            keyboard = []
            
            for sub in subscriptions:
                topic = sub.topic
                settings_text += f"üìö {topic.name}\n"
                settings_text += f"   –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {sub.frequency_hours} —á–∞—Å–æ–≤\n\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
                keyboard.append([
                    InlineKeyboardButton(text=f"üïê {topic.name} - 6—á", callback_data=f"set_freq_{sub.id}_6"),
                    InlineKeyboardButton(text=f"üïê {topic.name} - 12—á", callback_data=f"set_freq_{sub.id}_12"),
                    InlineKeyboardButton(text=f"üïê {topic.name} - 24—á", callback_data=f"set_freq_{sub.id}_24")
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(settings_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in settings command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

async def callback_topic_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    try:
        query = update.callback_query
        await query.answer()
        
        topic_id = int(query.data.split(":")[1])
        
        with DatabaseService() as db_service:
            user = db_service.get_user_by_telegram_id(query.from_user.id)
            
            if not user:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ ID
            topic = db_service.get_topic_by_id(topic_id)
            
            if not topic:
                await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
            existing_subs = db_service.get_user_subscriptions(user.id)
            for sub in existing_subs:
                if sub.topic_id == topic_id:
                    await query.edit_message_text(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {topic.name}")
                    return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = db_service.create_subscription(
                user_id=user.id,
                topic_id=topic_id,
                frequency_hours=24
            )
            
            await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {topic.name} —Å–æ–∑–¥–∞–Ω–∞!")
            
    except Exception as e:
        logger.error(f"Error in topic_select callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–µ–º—ã")


async def callback_add_custom_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π —Ç–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'React', 'Docker', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'):")
    return WAITING_FOR_CUSTOM_TOPIC


async def handle_custom_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    try:
        topic_name = update.message.text.strip()
        
        if len(topic_name) < 2:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_FOR_CUSTOM_TOPIC
        
        if len(topic_name) > 50:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_FOR_CUSTOM_TOPIC
        
        # –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        slug = topic_name.lower().replace(' ', '-').replace('—ë', '–µ').replace('–π', '–∏')
        slug = ''.join(c for c in slug if c.isalnum() or c == '-')
        
        with DatabaseService() as db_service:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ç–µ–º–∞
            existing_topic = db_service.get_topic_by_slug(slug)
            if existing_topic:
                await update.message.reply_text(f"–¢–µ–º–∞ '{topic_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É:")
                return WAITING_FOR_CUSTOM_TOPIC
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            topic = db_service.create_topic(
                name=topic_name,
                slug=slug,
                description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞: {topic_name}"
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db_service.get_user_by_telegram_id(update.effective_user.id)
            if user:
                subscription = db_service.create_subscription(
                    user_id=user.id,
                    topic_id=topic.id,
                    frequency_hours=24
                )
            
            await update.message.reply_text(f"‚úÖ –¢–µ–º–∞ '{topic_name}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã
            keyboard = [
                [InlineKeyboardButton(text="üïê –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", callback_data=f"set_freq_{subscription.id}_6")],
                [InlineKeyboardButton(text="üïê –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤", callback_data=f"set_freq_{subscription.id}_12")],
                [InlineKeyboardButton(text="üïê –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞", callback_data=f"set_freq_{subscription.id}_24")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π:", reply_markup=reply_markup)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error in custom topic creation: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return ConversationHandler.END


async def callback_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–µ–º—É"""
    try:
        query = update.callback_query
        await query.answer()
        
        topic_id = int(query.data.split("_")[1])
        
        with DatabaseService() as db_service:
            user = db_service.get_user_by_telegram_id(query.from_user.id)
            if not user:
                await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
            topic = db_service.get_topic_by_id(topic_id)
            
            if not topic:
                await query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
            existing_subs = db_service.get_user_subscriptions(user.id)
            for sub in existing_subs:
                if sub.topic_id == topic_id:
                    await query.edit_message_text(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {topic.name}")
                    return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            subscription = db_service.create_subscription(
                user_id=user.id,
                topic_id=topic_id,
                frequency_hours=24
            )
            
            await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {topic.name} —Å–æ–∑–¥–∞–Ω–∞!")
            await query.message.reply_text(f"üéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–º—É '{topic.name}'!\n\n–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.")
        
    except Exception as e:
        logger.error(f"Error in subscribe callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")


async def callback_unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–µ–º—ã"""
    try:
        query = update.callback_query
        await query.answer()
        
        subscription_id = int(query.data.split("_")[1])
        
        with DatabaseService() as db_service:
            subscription = db_service.deactivate_subscription(subscription_id)
            
            if subscription:
                await query.edit_message_text("‚úÖ –û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                await query.message.reply_text("üì≠ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã")
            else:
                await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Error in unsubscribe callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")


async def callback_set_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å—Ç–æ—Ç—ã"""
    try:
        query = update.callback_query
        await query.answer()
        
        parts = query.data.split("_")
        subscription_id = int(parts[2])
        frequency = int(parts[3])
        
        with DatabaseService() as db_service:
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = db_service.get_user_subscriptions(query.from_user.id)
            for sub in subscription:
                if sub.id == subscription_id:
                    sub.frequency_hours = frequency
                    db_service.db.commit()
                    await query.edit_message_text(f"‚úÖ –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –∫–∞–∂–¥—ã–µ {frequency} —á–∞—Å–æ–≤")
                    return
            
            await query.edit_message_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"Error in set_frequency callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã")


async def callback_finish_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    try:
        query = update.callback_query
        await query.answer()
        
        with DatabaseService() as db_service:
            user = db_service.get_user_by_telegram_id(query.from_user.id)
            if not user:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            subscriptions = db_service.get_user_subscriptions(user.id)
            
            if not subscriptions:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
                return
            
            finish_text = "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n\n"
            for sub in subscriptions:
                finish_text += f"‚Ä¢ {sub.topic.name} (–∫–∞–∂–¥—ã–µ {sub.frequency_hours} —á–∞—Å–æ–≤)\n"
            
            finish_text += "\nüì∞ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º!"
            finish_text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."
            
            await query.edit_message_text(finish_text)
        
    except Exception as e:
        logger.error(f"Error in finish_selection callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def cmd_test_parsing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
        
        async with HabrParser() as parser:
            articles = await parser.get_latest_articles(max_articles=5)
            
            if not articles:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏")
                return
            
            result_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å –•–∞–±—Ä–∞:\n\n"
            
            for i, article in enumerate(articles[:3], 1):
                result_text += f"{i}. {article['title']}\n"
                result_text += f"   –ê–≤—Ç–æ—Ä: {article['author'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                result_text += f"   –°—Å—ã–ª–∫–∞: {article['url']}\n\n"
            
            await update.message.reply_text(result_text)
            
    except Exception as e:
        logger.error(f"Error in test parsing: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ")


async def cmd_test_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Yandex GPT"""
    try:
        from app.services.yandex_service import yandex_service
        
        await update.message.reply_text("ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex GPT...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        is_connected = await yandex_service.test_connection()
        
        if is_connected:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = yandex_service.get_model_info()
            
            result_text = "‚úÖ Yandex GPT –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            result_text += f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:\n"
            result_text += f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}\n"
            result_text += f"   –ú–æ–¥–µ–ª—å: {model_info['model']}\n"
            result_text += f"   API –∫–ª—é—á: {'‚úÖ' if model_info['api_key_configured'] else '‚ùå'}\n"
            result_text += f"   Folder ID: {'‚úÖ' if model_info['folder_id_configured'] else '‚ùå'}\n\n"
            result_text += "üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã!"
            
        else:
            result_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex GPT\n\n"
            result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            result_text += "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
            result_text += "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Folder ID\n"
            result_text += "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex Cloud API\n"
            result_text += "‚Ä¢ –ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ"
        
        await update.message.reply_text(result_text)
        
    except Exception as e:
        logger.error(f"Error in AI test: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI")


async def cmd_test_digest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞"""
    try:
        from app.services.digest_service import digest_service
        
        await update.message.reply_text("üì∞ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç...")
        
        success = await digest_service.send_test_article(update.effective_user.id)
        
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞")
        
    except Exception as e:
        logger.error(f"Error in digest test: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞") 