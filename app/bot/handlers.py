from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from typing import List
from loguru import logger

from app.database.models import User, Topic, Subscription
from app.database.database import get_db
from app.services.parser_service import HabrParser
from app.core.config import settings


router = Router()


class SubscriptionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    waiting_for_topic = State()
    waiting_for_frequency = State()


@router.message(Command("start"))
async def cmd_start(message: Message, db: Session = next(get_db())):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            db.add(user)
            db.commit()
            db.refresh(user)
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–±—Ä–î–∞–π–¥–∂–µ—Å—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ IT-—Å—Ç–∞—Ç—å—è–º–∏ —Å –•–∞–±—Ä–∞.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã
/subscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/topics - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /topics —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã!
        """
        
        await message.answer(welcome_text)
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã  
/subscriptions - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/topics - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
/test_ai - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex GPT
/test_parsing - –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –•–∞–±—Ä–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π

ü§ñ AI-–º–æ–¥–µ–ª—å: Yandex GPT
- –ë—ã—Å—Ç—Ä–∞—è –∏ —Ç–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ
- –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–µ–π

üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: 6 —á–∞—Å–æ–≤
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: 24 —á–∞—Å–∞
- –°—Ç–∞—Ç—å–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è
    """
    
    await message.answer(help_text)


@router.message(Command("topics"))
async def cmd_topics(message: Message, db: Session = next(get_db())):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"""
    try:
        topics = db.query(Topic).filter(Topic.is_active == True).all()
        
        if not topics:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
            return
        
        topics_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for topic in topics:
            topics_text += f"‚Ä¢ {topic.name}\n"
            if topic.description:
                topics_text += f"  {topic.description}\n"
            topics_text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üìå {topic.name}",
                    callback_data=f"subscribe_{topic.id}"
                )
            ])
        
        await message.answer(topics_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in topics command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º.")


@router.message(Command("subscriptions"))
async def cmd_subscriptions(message: Message, db: Session = next(get_db())):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        subscriptions = db.query(Subscription).filter(
            Subscription.user_id == user.id,
            Subscription.is_active == True
        ).all()
        
        if not subscriptions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topics —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã!")
            return
        
        subs_text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for sub in subscriptions:
            topic = sub.topic
            subs_text += f"‚Ä¢ {topic.name}\n"
            subs_text += f"  –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ {sub.frequency_hours} —á–∞—Å–æ–≤\n\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {topic.name}",
                    callback_data=f"unsubscribe_{sub.id}"
                )
            ])
        
        await message.answer(subs_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in subscriptions command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")


@router.callback_query(F.data.startswith("subscribe_"))
async def callback_subscribe(callback: CallbackQuery, db: Session = next(get_db())):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–µ–º—É"""
    try:
        topic_id = int(callback.data.split("_")[1])
        
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
            return
        
        topic = db.query(Topic).filter(Topic.id == topic_id).first()
        if not topic:
            await callback.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        existing_sub = db.query(Subscription).filter(
            Subscription.user_id == user.id,
            Subscription.topic_id == topic_id,
            Subscription.is_active == True
        ).first()
        
        if existing_sub:
            await callback.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {topic.name}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = Subscription(
            user_id=user.id,
            topic_id=topic_id,
            frequency_hours=24  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        )
        
        db.add(subscription)
        db.commit()
        
        await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {topic.name} —Å–æ–∑–¥–∞–Ω–∞!")
        await callback.message.answer(f"üéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–º—É '{topic.name}'!\n\n–î–∞–π–¥–∂–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.")
        
    except Exception as e:
        logger.error(f"Error in subscribe callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ")


@router.callback_query(F.data.startswith("unsubscribe_"))
async def callback_unsubscribe(callback: CallbackQuery, db: Session = next(get_db())):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç–µ–º—ã"""
    try:
        subscription_id = int(callback.data.split("_")[1])
        
        subscription = db.query(Subscription).filter(
            Subscription.id == subscription_id
        ).first()
        
        if not subscription:
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
        if not user or subscription.user_id != user.id:
            await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        topic_name = subscription.topic.name
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription.is_active = False
        db.commit()
        
        await callback.answer(f"‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {topic_name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        await callback.message.answer(f"üì≠ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã '{topic_name}'")
        
    except Exception as e:
        logger.error(f"Error in unsubscribe callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ")


@router.message(Command("test_parsing"))
async def cmd_test_parsing(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    try:
        await message.answer("üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
        
        async with HabrParser() as parser:
            articles = await parser.get_latest_articles(max_articles=5)
            
            if not articles:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏")
                return
            
            result_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å –•–∞–±—Ä–∞:\n\n"
            
            for i, article in enumerate(articles[:3], 1):
                result_text += f"{i}. {article['title']}\n"
                result_text += f"   –ê–≤—Ç–æ—Ä: {article['author'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                result_text += f"   –°—Å—ã–ª–∫–∞: {article['url']}\n\n"
            
            await message.answer(result_text)
            
    except Exception as e:
        logger.error(f"Error in test parsing: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ")


@router.message(Command("test_ai"))
async def cmd_test_ai(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Yandex GPT"""
    try:
        from app.services.yandex_service import yandex_service
        
        await message.answer("ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex GPT...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        is_connected = await yandex_service.test_connection()
        
        if is_connected:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = yandex_service.get_model_info()
            
            result_text = "‚úÖ Yandex GPT –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            result_text += f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:\n"
            result_text += f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}\n"
            result_text += f"   –ú–æ–¥–µ–ª—å: {model_info['model']}\n"
            result_text += f"   API –∫–ª—é—á: {'‚úÖ' if model_info['api_key_configured'] else '‚ùå'}\n"
            result_text += f"   Folder ID: {'‚úÖ' if model_info['folder_id_configured'] else '‚ùå'}\n\n"
            result_text += "üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã!"
            
        else:
            result_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex GPT\n\n"
            result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            result_text += "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞\n"
            result_text += "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Folder ID\n"
            result_text += "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Yandex Cloud API\n"
            result_text += "‚Ä¢ –ë–∞–ª–∞–Ω—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ"
        
        await message.answer(result_text)
        
    except Exception as e:
        logger.error(f"Error in AI test: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI") 