from typing import List, Dict, Optional
from datetime import datetime, timedelta
from loguru import logger

from app.services.database_service import DatabaseService
from app.services.yandex_service import yandex_service
from app.bot.bot import bot_instance


class DigestService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.db_service = DatabaseService()
    
    async def send_digest_to_user(self, user_id: int, topic_id: int, limit: int = 3) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            articles = self.db_service.get_new_articles_for_user(user_id, topic_id, limit)
            
            if not articles:
                logger.info(f"No new articles for user {user_id} on topic {topic_id}")
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            topic = self.db_service.get_topic_by_id(topic_id)
            if not topic:
                logger.error(f"Topic {topic_id} not found")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = f"üì∞ –î–∞–π–¥–∂–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic.name}\n\n"
            
            for i, article in enumerate(articles, 1):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not article.summary:
                    try:
                        summary = await yandex_service.generate_summary(
                            content=article.content or "",
                            title=article.title
                        )
                        self.db_service.update_article_summary(article.id, summary)
                    except Exception as e:
                        logger.error(f"Error generating summary for article {article.id}: {e}")
                        summary = "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                else:
                    summary = article.summary
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –¥–∞–π–¥–∂–µ—Å—Ç
                digest_text += f"üìÑ {i}. {article.title}\n"
                if article.author:
                    digest_text += f"üë§ –ê–≤—Ç–æ—Ä: {article.author}\n"
                digest_text += f"üìù {summary}\n"
                digest_text += f"üîó {article.url}\n\n"
                
                # –û—Ç–º–µ—á–∞–µ–º —Å—Ç–∞—Ç—å—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                self.db_service.mark_article_sent(user_id, article.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot_instance.send_message(user_id, digest_text)
            logger.info(f"Digest sent to user {user_id} for topic {topic.name}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending digest to user {user_id}: {e}")
            return False
    
    async def send_digest_to_all_users(self) -> Dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        try:
            stats = {
                "users_processed": 0,
                "digests_sent": 0,
                "errors": 0
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            users = self.db_service.get_users_with_subscriptions()
            
            for user in users:
                try:
                    stats["users_processed"] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    subscriptions = self.db_service.get_user_subscriptions(user.id)
                    
                    for subscription in subscriptions:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç
                        if self._should_send_digest(subscription):
                            success = await self.send_digest_to_user(
                                user.telegram_id, 
                                subscription.topic_id
                            )
                            
                            if success:
                                stats["digests_sent"] += 1
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                subscription.updated_at = datetime.utcnow()
                                self.db_service.db.commit()
                            else:
                                stats["errors"] += 1
                
                except Exception as e:
                    logger.error(f"Error processing user {user.id}: {e}")
                    stats["errors"] += 1
            
            logger.info(f"Digest sending completed: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"Error in send_digest_to_all_users: {e}")
            return {"users_processed": 0, "digests_sent": 0, "errors": 1}
    
    def _should_send_digest(self, subscription) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç"""
        if not subscription.is_active:
            return False
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–æ–≤–∞—è (updated_at = None), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not subscription.updated_at:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        time_since_last = datetime.utcnow() - subscription.updated_at
        hours_since_last = time_since_last.total_seconds() / 3600
        
        return hours_since_last >= subscription.frequency_hours
    
    async def send_welcome_message(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–±—Ä–î–∞–π–¥–∂–µ—Å—Ç!

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ IT-—Å—Ç–∞—Ç—å–∏ —Å –•–∞–±—Ä–∞ —Å –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—é–º–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Yandex GPT.

üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
            """
            
            await bot_instance.send_message(user_id, welcome_text)
            return True
            
        except Exception as e:
            logger.error(f"Error sending welcome message to {user_id}: {e}")
            return False
    
    async def send_error_notification(self, user_id: int, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            error_text = f"""
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:

{error_message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """
            
            await bot_instance.send_message(user_id, error_text)
            return True
            
        except Exception as e:
            logger.error(f"Error sending error notification to {user_id}: {e}")
            return False
    
    async def send_test_article(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é
            articles = self.db_service.get_unprocessed_articles(limit=1)
            
            if not articles:
                await bot_instance.send_message(
                    user_id, 
                    "üì∞ –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
                )
                return True
            
            article = articles[0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            try:
                summary = await yandex_service.generate_summary(
                    content=article.content or "",
                    title=article.title
                )
            except Exception as e:
                logger.error(f"Error generating test summary: {e}")
                summary = "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_text = f"""
üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è:

üìÑ {article.title}

üë§ –ê–≤—Ç–æ—Ä: {article.author or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üìù –†–µ–∑—é–º–µ:
{summary}

üîó {article.url}

‚úÖ AI-—Ä–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!
            """
            
            await bot_instance.send_message(user_id, test_text)
            return True
            
        except Exception as e:
            logger.error(f"Error sending test article to {user_id}: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
digest_service = DigestService() 